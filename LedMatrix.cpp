/* Part of LED Matrix Arduino library
 * Copyright (C) 2017 Kane Wallmann
 * See LICENCE.txt for license (MIT)*/

#include <limits.h>
#include "LedMatrix.h"

LedMatrix::LedMatrix(int *apin, int apin_count, int *cpin, int cpin_count, LedMatrixMode mode)
{
	this->mode = mode;

	this->apin = apin;
	this->cpin = cpin;

	this->apin_count = apin_count;
	this->cpin_count = cpin_count;

	this->timer = micros();
	this->current_col = 0;
	this->delay = LED_MATRIX_DEFAULT_DELAY;

	for( int a = 0; a < apin_count; a++ )
	{
		pinMode(apin[a], OUTPUT);
		digitalWrite(apin[a], LOW);
	}

	for( int a = 0; a < cpin_count; a++ )
	{
		pinMode(cpin[a], OUTPUT);
		digitalWrite(cpin[a], HIGH);
	}

	for( int x = 0; x < cpin_count; x++ )
	{
		for( int y = 0; y < apin_count; y++ )
		{
			this->state[x][y] = false;
		}
	}
}

void LedMatrix::ledTask()
{
	unsigned long time_passed;
	unsigned long us = micros();

	// Check for overflow on micros(), this works fine as long as AsyncTask was called less than ~70 minutes ago
	// Otherwise the next call will sort things out, no big deal.
	if( us < this->timer )
	{
		time_passed = ULONG_MAX - this->timer + us;
	}
	else
	{
		time_passed = us - this->timer;
	}

	// If it is time to move to next column
	if( time_passed > this->delay )
	{
		// Set the previous cathode pin high (OFF)
		digitalWrite(this->cpin[this->current_col], HIGH);

		// Increment column counter
		this->current_col++;

		// Wrap column counter
		if( this->current_col >= this->cpin_count )
		{
			this->current_col = 0;
		}

		// Store pointer to current column for convenience
		bool *row = this->state[this->current_col];

		// Cycle through rows and set them to desired state (HIGH for true or LOW for false)
		for( int a = 0; a < this->apin_count; a++ )
		{
			digitalWrite(this->apin[a], row[a]);
		}

		// Light up the row by changing the cathode to LOW (ON)
		digitalWrite(this->cpin[this->current_col], LOW);

		// Update the timer
		this->timer = us;
	}
}

void LedMatrix::setPixel(int x, int y, bool state)
{
	int tmp;
	int xBound = this->cpin_count;
	int yBound = this->apin_count;

	// Transform the pixel location based on current rotation mode
	switch( this->mode )
	{
		case LED_MATRIX_0DEG:
			// Already in the right place
			break;
		case LED_MATRIX_90DEG:
			// Swap x,y and flip x
			tmp = y;
			y = x;
			x = this->apin_count - 1 - tmp;
			xBound = this->apin_count;
			yBound = this->cpin_count;
			break;
		case LED_MATRIX_180DEG:
			// Flip x,y
			y = this->apin_count - 1 - y;
			x = this->cpin_count - 1 - x;
			break;
		case LED_MATRIX_270DEG:
			// Swap x,y and flip y
			tmp = y;
			y = this->cpin_count - 1 - x;
			x = tmp;
			xBound = this->apin_count;
			yBound = this->cpin_count;
			break;
	}

	// Check bounds of transformed pixel location
	if( x >= 0 && x <= xBound && y >= 0 && y <= yBound )
	{
		this->state[y][x] = state;
	}
}

void LedMatrix::draw(bool *data, int x, int y, int width, int height)
{
	// Just iterate over array and call SetPixel
	for( int r = 0; r < width; r++ )
	{
		for( int c = 0; c < height; c++ )
		{
			this->setPixel(x + r, y + c, data[c * width + r]);
		}
	}
}

void LedMatrix::clear()
{
	// Set all of the memory of this->state to 0 (false)
	memset(this->state, 0, sizeof(this->state));
}

void LedMatrix::setMode(LedMatrixMode mode)
{
	this->mode = mode;
}

void LedMatrix::setDelay(unsigned long micros)
{
	this->delay = micros;
}

void LedMatrix::drawByte(byte data, int x, int y, bool horizontal)
{
	for( int a = 0; a < 8; a++ )
	{
		if( horizontal )
		{
			this->setPixel(x + a, y, data & (0x01 << (7 - a)));
		}
		else
		{
			this->setPixel(x, y + a, data & (0x01 << (7 - a)));
		}
	}
}

void LedMatrix::drawBytes(byte *data, int count, int x, int y, bool horizontal)
{
	for( int a = 0; a < count; a++ )
	{
		if( horizontal )
		{
			this->drawByte( data[a], x, y + a, horizontal );
		}
		else
		{
			this->drawByte( data[a], x + a, y, horizontal );
		}
	}
}

// Just a blob of data storing ascii characters
// Each byte represents a vertical line of the 8 bit high character, each character is 5 bits wide
byte ascii_5x8[][5] =
{
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},

	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0x0,	0x0,	0x0},

	{0x0,	0x0,	0x0,	0x0,	0x0},
	{0x0,	0x0,	0xFA,	0x0,	0x0},
	{0x0,	0xE0,	0x0,	0xE0,	0x0},
	{0x28,	0xFE,	0x28,	0xFE,	0x28},
	{0x24,	0x54,	0xFE,	0x54,	0x48},
	{0xC4,	0xC8,	0x10,	0x26,	0x46},
	{0x6C,	0x92,	0xAA,	0x44,	0xA},
	{0x0,	0xA0,	0xC0,	0x0,	0x0},
	{0x0,	0x38,	0x44,	0x82,	0x0},
	{0x0,	0x82,	0x44,	0x38,	0x0},
	{0x28,	0x10,	0x7C,	0x10,	0x28},
	{0x10,	0x10,	0x7C,	0x10,	0x10},
	{0x0,	0xA,	0xC,	0x0,	0x0},
	{0x10,	0x10,	0x10,	0x10,	0x10},
	{0x0,	0x6,	0x6,	0x0,	0x0},
	{0x4,	0x8,	0x10,	0x20,	0x40},

	{0x7C,	0x8A,	0x92,	0xA2,	0x7C},
	{0x0,	0x42,	0xFE,	0x2,	0x0},
	{0x42,	0x86,	0x8A,	0x92,	0x66},
	{0x84,	0x82,	0xA2,	0xD2,	0x8C},
	{0x18,	0x28,	0x48,	0xFE,	0x8},
	{0xE4,	0xA2,	0xA2,	0xA2,	0x9C},
	{0x3C,	0x52,	0x92,	0x92,	0xC},
	{0x80,	0x8E,	0x90,	0xA0,	0xC0},
	{0x6C,	0x92,	0x92,	0x92,	0x68},
	{0x60,	0x92,	0x92,	0x94,	0x78},
	{0x0,	0x6C,	0x6C,	0x0,	0x0},
	{0x0,	0x6A,	0x6C,	0x0,	0x0},
	{0x10,	0x28,	0x44,	0x82,	0x0},
	{0x28,	0x28,	0x28,	0x28,	0x28},
	{0x0,	0x82,	0x44,	0x28,	0x10},
	{0x40,	0x80,	0x8A,	0x90,	0x60},

	{0x4C,	0x92,	0x9E,	0x82,	0x7C},
	{0x7E,	0x90,	0x90,	0x90,	0x7E},
	{0xFE,	0x92,	0x92,	0x92,	0x6C},
	{0x7C,	0x82,	0x82,	0x82,	0x44},
	{0xFE,	0x82,	0x82,	0x44,	0x38},
	{0xFE,	0x92,	0x92,	0x92,	0x82},
	{0xFE,	0x90,	0x90,	0x90,	0x80},
	{0x7C,	0x82,	0x82,	0x92,	0x5E},
	{0xFE,	0x10,	0x10,	0x10,	0xFE},
	{0x0,	0x82,	0xFE,	0x82,	0x0},
	{0x4,	0x2,	0x82,	0xFC,	0x80},
	{0xFE,	0x10,	0x28,	0x44,	0x82},
	{0xFE,	0x2,	0x2,	0x2,	0x2},
	{0xFE,	0x40,	0x30,	0x40,	0xFE},
	{0xFE,	0x20,	0x10,	0x8,	0xFE},
	{0x7C,	0x82,	0x82,	0x82,	0x7C},

	{0xFE,	0x90,	0x90,	0x90,	0x60},
	{0x7C,	0x82,	0x8A,	0x84,	0x7A},
	{0xFE,	0x90,	0x98,	0x94,	0x62},
	{0x62,	0x92,	0x92,	0x92,	0x8C},
	{0x80,	0x80,	0xFE,	0x80,	0x80},
	{0xFC,	0x2,	0x2,	0x2,	0xFC},
	{0xF8,	0x4,	0x2,	0x4,	0xF8},
	{0xFC,	0x2,	0xC,	0x2,	0xFC},
	{0xC6,	0x28,	0x11,	0x28,	0xC6},
	{0xE0,	0x10,	0xE,	0x10,	0xE0},
	{0x86,	0x8A,	0x92,	0xB2,	0xC2},
	{0xFE,	0x82,	0x82,	0x0,	0x0},
	{0x80,	0x60,	0x10,	0xC,	0x2},
	{0x0,	0x0,	0x82,	0x82,	0xFE},
	{0x20,	0x40,	0x80,	0x40,	0x20},
	{0x2,	0x2,	0x2,	0x2,	0x2},

	{0x80,	0x40,	0x20,	0x0,	0x0},
	{0x4,	0x2A,	0x2A,	0x2A,	0x1E},
	{0xFE,	0x12,	0x22,	0x22,	0x1C},
	{0x1C,	0x22,	0x22,	0x22,	0x4},
	{0x1C,	0x22,	0x22,	0x12,	0xFE},
	{0x1C,	0x2A,	0x2A,	0x2A,	0x18},
	{0x18,	0x6E,	0x88,	0x80,	0x50},
	{0x30,	0x4A,	0x4A,	0x4A,	0x7C},
	{0xFE,	0x10,	0x20,	0x20,	0x1E},
	{0x0,	0x42,	0xFE,	0x2,	0x14},
	{0x4,	0x2,	0x42,	0xFC,	0x14},
	{0xFE,	0x8,	0x14,	0x22,	0x14},
	{0x2,	0x82,	0xFE,	0x2,	0x2},
	{0x3E,	0x20,	0x18,	0x20,	0x1E},
	{0x3E,	0x10,	0x20,	0x20,	0x1E},
	{0x1C,	0x22,	0x22,	0x22,	0x1C},

	{0x3E,	0x28,	0x28,	0x28,	0x10},
	{0x10,	0x28,	0x28,	0x18,	0x3E},
	{0x3E,	0x10,	0x20,	0x20,	0x10},
	{0x12,	0x2A,	0x2A,	0x2A,	0x4},
	{0x20,	0xFE,	0x22,	0x0,	0x4},
	{0x3C,	0x2,	0x2,	0x4,	0x3E},
	{0x38,	0x4,	0x2,	0x4,	0x38},
	{0x3C,	0x2,	0xC,	0x2,	0x3C},
	{0x22,	0x14,	0x8,	0x14,	0x22},
	{0x30,	0xA,	0xA,	0xA,	0x3C},
	{0x22,	0x26,	0x2A,	0x32,	0x22},
	{0x10,	0x0,	0x6C,	0x82,	0x0},
	{0x0,	0x0,	0xFE,	0x0,	0x0},
	{0x0,	0x82,	0x6C,	0x10,	0x0},
	{0x0,   0x0,    0x0,    0x0,    0x0},
	{0x0,   0x0,    0x0,    0x0,    0x0},
};
